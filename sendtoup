#!/usr/bin/perl

use strict;
use warnings;

use Getopt::Long;
use HTTP::Request::Common;
use LWP::UserAgent;
use Pod::Usage;
use JSON::XS;



# Init
my $man = '';
my $help = '';
my $progress = 1;
my $hidden = 0;
my $password = '';
my $version = '0.4.5';
my $title = "SendToUP.lluga.net $version";


$HTTP::Request::Common::DYNAMIC_FILE_UPLOAD = 1;

GetOptions(
	'help|?' => \$help,
	'man' => \$man,
	'progress|p' => \$progress,
	'hidden|h' => \$hidden,
	'password=s' => \$password) or podusage(2);


pod2usage(1) if $help;
pod2usage(-exitstatus => 0, -verbose => 2) if $man;

eval {
	require Term::ProgressBar;
	Term::ProgressBar->import(2.00);
};

if ($@) {
	# Remove duplicate newline from error, and no need for two 'at line' messages
	chomp(my $err = $@);
	$err =~ s/\) at .*? line.*/)/;
	$progress = 0;
}

pod2usage(1) unless @ARGV;

sub main() {
	my $n = 0;
	my $total_files = $#ARGV+1;

	my $file_id;
	my $file_pass;
	my $group_id;

	foreach (@ARGV) {
		my $file = $_;

		die "Can't read file '$file'" unless $file and -f $file;

		print "Uploading: $file\n" if not $progress;

		($file_id, $file_pass) = upload($file, $hidden, $password);
		$n++;

		# make a pause beetwen uploads
		sleep(3) unless $n < 2;
	}
}


sub get_upload_url() {
	my $req_upload = GET 'http://up.lluga.net/get_upload_url.php';
	my $req_upload_ua = LWP::UserAgent->new();
	$req_upload_ua->timeout(30);
	$req_upload_ua->agent("Sendtoup/$version");
	my $response_upload = $req_upload_ua->request($req_upload);

	if ($response_upload->{_rc} && $response_upload->{_msg} eq 'OK') {
		my $r = decode_json($response_upload->{_content});
		my $err = $r->{error};

		if ($r->{message} && $r->{error} == 0) {
			return $r->{message};
		} else {
			return '';
		}
	}
}

sub upload( )
{
	my ($file, $hidden, $password) = @_;
	my $file_size = (stat($file))[7];
	local $| = 1;

	my $progress_bar;

	my $upload_url = get_upload_url();
	if ($upload_url eq '') {
		die "[FAIL] Cant get free upload server\n"
	}

#        	':read_size_hint' => 1048576,

	my $req = POST 'http://up.lluga.net'.$upload_url,
        	'Content_Type' => 'multipart/form-data',
		'Content' => [
			uploadPassword => $password,
			file => [$file]];

	my $gen = $req->content();
	die unless ref($gen) eq "CODE";

	if ($progress eq 1) {
		$progress_bar = Term::ProgressBar->new({name => $file, count => $file_size, ETA => 'linear'});
		$progress_bar->max_update_rate(0.5);
		$progress_bar->minor(0);
	}

	my $state;
	my $size;
	my $next_update = 0;

	$req->content(
		sub {
			my $chunk = &$gen();
			$size += file_length_in_encoded_chunk(\$chunk, \$state, $file_size);

			if ($size >= $next_update && $progress eq 1) {
				$next_update = $progress_bar->update($size);
			}
			return $chunk;
	});

	my $ua = LWP::UserAgent->new();
	$ua->timeout(60);
	$ua->agent("Sendtoup/$version");

	# start here - go go go
	my $response = $ua->request($req);

	my $file_id = 0;
	my $r;
	my $id;
	my $err;
	my $err_message;
	my $pass;
	my $group;

	if ($response->{_rc} == 200 && $response->{_msg} eq 'OK') {
		$r = decode_json($response->{_content});
		$id = $r->{id};
		$err = $r->{error};
		$err_message = $r->{message};
		$pass = $r->{pass};

		unless ($err == 0 ) {
			die "[FAIL] '$file' error: $err\tmessage: $err_message\n"
		} else {
			print "[OK] '$file' link: http://up.lluga.net/$id/$pass/\n $err_message\n";
		}
	} else {
		die "[FAIL] '$file' message: $response->{_msg}\n";
	}

	return ($id, $pass);
}


sub file_length_in_encoded_chunk
{
	my ($chunk, $s, $img_size) = @_;

	$$s = {} unless ref $$s eq 'HASH';

	# If we've run past the end of the image there's nothing to do but
	# report no image content in this sector.
	return 0 if $$s->{done};

	unless ($$s->{in}) {
		# Since we haven't found the image yet append this chunk to
		# our internal data store, we do this because we have to do a
		# regex match on m[Content-Type...] which might be split
		# across multiple chunks
		$$s->{data} .= defined $$chunk ? $$chunk : '';

		if ($$s->{data} =~ m[Content-Type: .*?\r\n\r\n]g) {
			# We've found the image inside the stream, record this,
			# delete ->{data} since we don't need it, and see how much
			# of the image this particular chunk gives us.
			$$s->{in} = 1;
			my $size = length substr($$s->{data}, pos($$s->{data}), -1);
			delete $$s->{data};

			$$s->{size} = $size;

			if ($$s->{size} >= $img_size) {
				# The image could be so small that we've already run
				# through it in chunk it starts in, mark as done and
				# return the total image size

				$$s->{done} = 1;
				return $img_size;
			} else {
				return $$s->{size};
			}
		} else {
			# Are we inside the image yet? No!
			return 0;
		}
	} else {
		my $size = length $$chunk;

		if (($$s->{size} + $size) >= $img_size) {
			# This chunk finishes the image
			$$s->{done} = 1;

			# Return what we had left
			return $img_size - $$s->{size};
		} else {
			# This chunk isn't the last one
			$$s->{size} += $size;

			return $size;
		}
	}
}


main();

__END__

=head1 NAME

SendToUP - a UP.lluga.net file uploader for the Unix.
Version 0.4.5

=head1 SYNOPSIS

sendtoup [--progress] [--hidden] [--password=yourpass] FILENAME...

where FILENAME is an file for upload to L<up.lluga.net>.
Multiple filenames can be separated by spaces or you can
do stuff like "sendtoup *.*".

=head1 OPTIONS

=over 4

=item B<--progress>

Display a progress bar for each upload with L<Term::ProgressBar>. That
optional module will have to be installed on the system.

=item B<--hidden>

Set this option hide uploaded file from public view in top page.

=item B<--password=yourpass>

Set password for download file.

=back 4

=head1 BUGS

Please report bugs at dimkalinux@gmail.com

=head1 AUTHORS

B<Send To UP> was written by Dimkalinux <dimkalinux@gmail.com>.

This manual page was written by Dimkalinux <dimkalinux@gmail.com>.

I`m use code from <Send To Flickr> project. Thanks, guys.

=head1 COPYRIGHT

This program is free software; you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the
Free Software Foundation; either version 3, or (at your option) any
later version.

On Debian GNU/Linux systems, the complete text of the GNU General
Public License can be found in `/usr/share/common-licenses/GPL'.

=cut
